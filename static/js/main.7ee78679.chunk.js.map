{"version":3,"sources":["components/BookDetails.jsx","components/BookActions.jsx","components/Book.jsx","components/ListBooks.jsx","components/Header.jsx","App.js","serviceWorker.js","index.js"],"names":["BookDetails","data","this","props","status","isBorrowed","className","href","link","target","title","src","imageLink","alt","author","pages","country","language","Component","BookActions","id","toggleBorrowed","buttonText","onClick","Book","ListBooks","books","state","setState","map","book","i","bind","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"y4sBA6BeA,E,uKAzBX,IAAMC,EAAOC,KAAKC,MAAMF,KAEpBG,EAAS,YAKb,OAJIH,EAAKI,aACPD,EAAS,YAIT,6BACE,wBAAIE,UAAU,cACZ,uBAAGC,KAAMN,EAAKO,KAAMC,OAAO,UACxBR,EAAKS,QAGV,yBAAKC,IAAKV,EAAKW,UAAWC,IAAK,SAC/B,iCAAOZ,EAAKa,QACZ,qCAAWb,EAAKc,OAChB,uCAAad,EAAKe,SAClB,wCAAcf,EAAKgB,UACnB,sCAAYb,Q,GArBMc,aCmBXC,E,uKAjBX,IAAMC,EAAKlB,KAAKC,MAAMiB,GAChBf,EAAaH,KAAKC,MAAME,WACxBgB,EAAiBnB,KAAKC,MAAMkB,eAE9BC,EAAa,YAKjB,OAJIjB,IACFiB,EAAa,eAIb,4BAAQhB,UAAU,kBAAkBiB,QAAS,kBAAMF,EAAeD,KAC/DE,O,GAbiBJ,aCkBXM,E,uKAdX,IAAMvB,EAAOC,KAAKC,MAAMF,MAAQ,GAChC,OACE,yBAAKK,UAAU,aACb,kBAAC,EAAD,CAAaL,KAAMA,IACnB,kBAAC,EAAD,CACEmB,GAAIlB,KAAKC,MAAMiB,GACff,WAAYJ,EAAKI,WACjBgB,eAAgBnB,KAAKC,MAAMkB,sB,GATlBH,aCmCJO,E,kDAnCb,WAAYtB,GAAQ,IAAD,sBACjB,cAAMA,GAEN,IAAIuB,EAAQvB,EAAMuB,MAHD,OAIZA,IACHA,EAAQ,IAGV,EAAKC,MAAQ,CAAED,SARE,E,2DAWJN,GACb,IAAMM,EAAQxB,KAAKyB,MAAMD,MACzBA,EAAMN,GAAIf,YAAcqB,EAAMN,GAAIf,WAElCH,KAAK0B,SAAS,CAAEF,Y,+BAGR,IAAD,OACP,OACE,yBAAKpB,UAAU,cACZJ,KAAKyB,MAAMD,MAAMG,KAAI,SAACC,EAAMC,GAC3B,OACE,kBAAC,EAAD,CACE9B,KAAM6B,EACNV,GAAIW,EACJV,eAAgB,EAAKA,eAAeW,KAAK,a,GA3B/Bd,aCUTe,E,uKATX,OACE,yBAAK3B,UAAU,UACb,yBAAKK,IAAI,oBACT,sD,GALaO,aCcNgB,MATf,WACE,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWoB,MAAOA,MCCJS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7ee78679.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass BookDetails extends Component {\n  render() {\n    const data = this.props.data;\n\n    let status = \"Available\";\n    if (data.isBorrowed) {\n      status = \"Borrowed\";\n    }\n\n    return (\n      <div>\n        <h2 className=\"book-title\">\n          <a href={data.link} target=\"_blank\">\n            {data.title}\n          </a>\n        </h2>\n        <img src={data.imageLink} alt={\"book\"} />\n        <p>By {data.author}</p>\n        <p>Pages: {data.pages}</p>\n        <p>Country: {data.country}</p>\n        <p>Language: {data.language}</p>\n        <p>Status: {status}</p>\n      </div>\n    );\n  }\n}\n\nexport default BookDetails;\n","import React, { Component } from \"react\";\n\nclass BookActions extends Component {\n  render() {\n    const id = this.props.id;\n    const isBorrowed = this.props.isBorrowed;\n    const toggleBorrowed = this.props.toggleBorrowed;\n\n    let buttonText = \"Lend Book\";\n    if (isBorrowed) {\n      buttonText = \"Return Book\";\n    }\n\n    return (\n      <button className=\"btn draw-border\" onClick={() => toggleBorrowed(id)}>\n        {buttonText}\n      </button>\n    );\n  }\n}\n\nexport default BookActions;\n","import React, { Component } from \"react\";\nimport BookDetails from \"./BookDetails\";\nimport BookActions from \"./BookActions\";\n\nclass Book extends Component {\n  render() {\n    const data = this.props.data || {};\n    return (\n      <div className=\"book-item\">\n        <BookDetails data={data} />\n        <BookActions\n          id={this.props.id}\n          isBorrowed={data.isBorrowed}\n          toggleBorrowed={this.props.toggleBorrowed}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Book;\n","import React, { Component } from \"react\";\nimport Book from \"./Book\";\n\nclass ListBooks extends Component {\n  constructor(props) {\n    super(props);\n\n    let books = props.books;\n    if (!books) {\n      books = [];\n    }\n\n    this.state = { books };\n  }\n\n  toggleBorrowed(id) {\n    const books = this.state.books;\n    books[id].isBorrowed = !books[id].isBorrowed;\n\n    this.setState({ books });\n  }\n\n  render() {\n    return (\n      <div className=\"books-list\">\n        {this.state.books.map((book, i) => {\n          return (\n            <Book\n              data={book}\n              id={i}\n              toggleBorrowed={this.toggleBorrowed.bind(this)}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default ListBooks;\n","import React, { Component } from \"react\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <div className=\"header\">\n        <img src=\"images/icon.png\" />\n        <h1>CME Top 100 Books</h1>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./App.css\";\nimport books from \"./data\";\n\nimport ListBooks from \"./components/ListBooks\";\nimport Header from \"./components/Header\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <ListBooks books={books} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}